import json
import re
from typing import Any
from disko_lib.logging import info
from disko_lib.messages.msgs import warn_generate_partial_failure
from disko_lib.result import DiskoResult, DiskoError
from disko_lib.types.disk import generate_config
from disko_lib.run_cmd import run

DEFAULT_CONFIG_FILE = "disko-config.nix"

HEADER_COMMENT = """
# This file was generated by disko generate
# Some disk and partition names were auto-generated from device attributes
# to be unique, but might not be very descriptive. Feel free to change them
# to something more meaningful.

"""

PARTIAL_FAILURE_COMMENT = """
###############################################################################
# WARNING: This file is incomplete! Some devices failed to generate a config. #
#    Check the logs of the 'disko generate' command for more information.     #
###############################################################################
"""


def run_generate() -> DiskoResult[dict[str, Any]]:
    generated_config_result = generate_config()
    generated_config = None

    if isinstance(generated_config_result, DiskoError):
        partial_failure_warning = generated_config_result.find_message(
            warn_generate_partial_failure
        )
        if not partial_failure_warning:
            return generated_config_result

        generated_config = partial_failure_warning.details["partial_config"]
    else:
        generated_config = generated_config_result.value

    config_as_nix = run(
        [
            "nix",
            "eval",
            "--expr",
            "{ disko.devices = ("
            f"builtins.fromJSON(''{json.dumps(generated_config)}'')"
            "); }",
        ]
    )
    if isinstance(config_as_nix, DiskoError):
        return config_as_nix

    # Contract the main attribute path to a single line to match all the examples
    nix_code = re.sub(r"^\{ disko = \{ devices", "{ disko.devices", config_as_nix.value)
    nix_code = re.sub(r"\}; \}$", "}", nix_code)

    with open(DEFAULT_CONFIG_FILE, "w") as f:
        f.write(HEADER_COMMENT)
        if isinstance(generated_config_result, DiskoError):
            f.write(PARTIAL_FAILURE_COMMENT)
        f.write(nix_code)
        info(f"Wrote generated config to {DEFAULT_CONFIG_FILE}")

    run(["nixfmt", DEFAULT_CONFIG_FILE])

    return generated_config_result
