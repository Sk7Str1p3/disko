#!/usr/bin/env nu

use lib [eval-disko-file eval-flake exit-on-error print-info print-help]

def modes [] { ["destroy", "format", "mount", "format,mount", "destroy,format,mount"] }


def main [
    mode: string@modes, # Mode to use. Allowed values are 'destroy', 'format', 'mount', 'format,mount', 'destroy,format,mount'
    disko_file?: path, # File to read the disko configuration from. Can be a .nix file or a .json file
    --flake (-f): string # Flake URI to search for the disko configuration
    ]: nothing -> nothing {

    if not ($mode in (modes)) {
        {
            success: false,
            messages: [ { code: ERR_INVALID_MODE, details: { mode: $mode, valid_modes: (modes) } } ]
        } | exit-on-error "validate mode"
    }

    if not ($flake != null xor $disko_file != null) {
        { success: false, messages: [ { code: ERR_MISSING_ARGUMENTS } ] } | exit-on-error "validate arguments"
    }

    let config = if $disko_file != null {
        $disko_file | eval-disko-file | exit-on-error "evaluate config"
    } else {
        $flake | eval-flake | exit-on-error "evaluate flake"
    }

    $config | to json | print-info
}
